# Generated by Django 4.2.17 on 2025-08-26 16:36

from django.db import migrations
from django.utils import timezone
import uuid


def migrate_projects_to_todos(apps, schema_editor):
    """
    Migrate existing Projects to TodoLists and Features to Tasks.
    
    This migration transforms the complex project management data structure
    into the simplified todo list structure while preserving essential data.
    """
    # Get models from the historical state
    Project = apps.get_model('projects', 'Project')
    Feature = apps.get_model('features', 'Feature')
    TodoList = apps.get_model('todos', 'TodoList')
    Task = apps.get_model('todos', 'Task')
    
    # Status mapping from 5-stage workflow to simplified 3-stage workflow
    status_mapping = {
        'idea': 'todo',
        'specification': 'todo',
        'development': 'ongoing',
        'testing': 'ongoing',
        'live': 'done'
    }
    
    # Priority mapping (Project/Feature both use same priority levels)
    priority_mapping = {
        'low': 'low',
        'medium': 'medium', 
        'high': 'high',
        'critical': 'urgent'  # Map critical to urgent
    }
    
    # Keep track of created todo lists to avoid duplicates
    created_todo_lists = {}
    migration_stats = {
        'projects_migrated': 0,
        'features_migrated': 0,
        'todo_lists_created': 0,
        'tasks_created': 0,
        'skipped_features': 0
    }
    
    print(f"Starting migration of {Project.objects.count()} projects and {Feature.objects.count()} features...")
    
    # Migrate Projects to TodoLists
    for project in Project.objects.all():
        try:
            # Create TodoList from Project
            todo_list = TodoList.objects.create(
                name=project.name,
                description=project.description or '',
                user=project.owner,
                color='#3B82F6',  # Default blue color
                created_at=project.created_at,
                updated_at=project.updated_at,
            )
            
            created_todo_lists[project.id] = todo_list
            migration_stats['projects_migrated'] += 1
            migration_stats['todo_lists_created'] += 1
            
            # Migrate Features to Tasks for this project
            features = Feature.objects.filter(project=project)
            
            for feature in features:
                try:
                    # Map status from 5-stage to 3-stage workflow
                    task_status = status_mapping.get(feature.status, 'todo')
                    
                    # Map priority
                    task_priority = priority_mapping.get(feature.priority, 'medium')
                    
                    # Determine completed_at timestamp
                    completed_at = None
                    if task_status == 'done':
                        # Use completed_date if available, otherwise updated_at
                        completed_at = getattr(feature, 'completed_date', None) or feature.updated_at
                    
                    # Create task
                    task = Task.objects.create(
                        title=feature.title,
                        description=feature.description or '',
                        priority=task_priority,
                        status=task_status,
                        start_date=None,  # Features don't have start_date
                        end_date=getattr(feature, 'due_date', None),
                        todo_list=todo_list,
                        user=feature.reporter,  # Use reporter as task owner
                        completed_at=completed_at,
                        created_at=feature.created_at,
                        updated_at=feature.updated_at,
                    )
                    
                    migration_stats['features_migrated'] += 1
                    migration_stats['tasks_created'] += 1
                    
                except Exception as e:
                    print(f"Error migrating feature {feature.title} (ID: {feature.id}): {str(e)}")
                    migration_stats['skipped_features'] += 1
                    continue
            
        except Exception as e:
            print(f"Error migrating project {project.name} (ID: {project.id}): {str(e)}")
            continue
    
    # Print migration statistics
    print("Migration completed!")
    print(f"Projects migrated: {migration_stats['projects_migrated']}")
    print(f"Todo lists created: {migration_stats['todo_lists_created']}")  
    print(f"Features migrated: {migration_stats['features_migrated']}")
    print(f"Tasks created: {migration_stats['tasks_created']}")
    print(f"Features skipped (errors): {migration_stats['skipped_features']}")


def reverse_migrate_todos_to_projects(apps, schema_editor):
    """
    Reverse migration: delete all TodoLists and Tasks.
    
    Note: This is a destructive operation that cannot fully restore
    the original Project/Feature structure due to data simplification.
    """
    TodoList = apps.get_model('todos', 'TodoList')
    Task = apps.get_model('todos', 'Task')
    
    # Count items before deletion
    todo_list_count = TodoList.objects.count()
    task_count = Task.objects.count()
    
    print(f"Reversing migration: deleting {todo_list_count} todo lists and {task_count} tasks...")
    
    # Delete all tasks first (cascading will handle this, but being explicit)
    Task.objects.all().delete()
    
    # Delete all todo lists
    TodoList.objects.all().delete()
    
    print("Reverse migration completed!")


class Migration(migrations.Migration):
    dependencies = [
        ("todos", "0001_initial"),
        ("projects", "0001_initial"),  # Ensure projects app exists
        ("features", "0001_initial"),  # Ensure features app exists
    ]

    operations = [
        migrations.RunPython(
            migrate_projects_to_todos,
            reverse_migrate_todos_to_projects,
        ),
    ]
